<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="voxel_size"     default="0.02"/>
  <param name="use_sim_time" value="true" />

  <!-- Change sensor frame to:
   - VIO's estimated base_link: `left_cam_base_link`
   - Or, if you want to use simulator's ground-truth: `left_cam`
  -->
  <arg name="sensor_frame" default="openni_rgb_optical_frame"/>
   <include file="$(find kimera_semantics_ros)/launch/static_transform.launch"/>

   <!-- <include file="$(find husky_control)/launch/control.launch"/> -->

    <!-- <include file="$(find husky_navigation)/launch/gmapping.launch" /> -->
    
    <!-- <include file="$(find husky_navigation)/launch/move_base.launch" /> -->
    <!-- <include file="$(find rf2o_laser_odometry)/launch/rf2o_laser_odometry.launch" /> -->
  <!-- If you want to play directly from a rosbag -->
  <arg name="play_bag" default="false"/>
  <arg name="bag_file" default=""/>
  <node name="player" pkg="rosbag" type="play" output="screen"
  args="-r 0.5 --clock $(arg bag_file)"  if="$(arg play_bag)"/>

  <!-- Generate pointcloud with semantic labels -->
  <arg name="publish_point_clouds" default="true"/>
  <arg name="run_stereo_dense"     default="false"/>
  <group if="$(arg publish_point_clouds)">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager"
          output="screen"/>

    <!-- For registered semantic point cloud conversion -->
    <node pkg="nodelet" type="nodelet" name="cloudify"
          args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager
          -no-bond" unless="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="rgb/camera_info"             to="/mask_rcnn/camerainfo"/>
      <remap from="rgb/image_rect_color"        to="/mask_rcnn/segmentation"/>
      <remap from="depth_registered/image_rect" to="/mask_rcnn/depth"/>
      <!-- Output -->
      <remap from="depth_registered/points"     to="/points"/>
      <!-- Params -->
      <param name="queue_size" value="20"/>
      <param name="exact_sync" value="false"/>

    </node>

     <!-- Run stereo_dense_reconstruction_node -->
    <node ns="stereo_gray" name="stereo_image_proc" pkg="stereo_image_proc"
      type="stereo_image_proc" clear_params="true" output="screen"
      if="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="left/image_rect_color"   to="/dev/null/left_cam"/>
      <remap from="right/image_rect_color"  to="/dev/null/right_cam"/>
      <remap from="left/image_raw"          to="/camera/rgb/image_raw"/>
      <remap from="left/camera_info"        to="/camera/rgb/camera_info"/>
      <remap from="right/image_raw"         to="/camera/rgb/image_raw"/>
      <remap from="right/camera_info"       to="/camera/rgb/camera_info"/>
      <!-- Output -->
      <remap from="/stereo_gray/points2"    to="/stereo_gray/points2"/>
      <!-- Params -->
      <param name="approximate_sync" value="true" />
    </node>

    <!-- Recolor dense stereo pointcloud with semantic labels-->
    <node name="pointcloud_recolor" type="pointcloud_recolor"
      pkg="pointcloud_recolor" output="screen"
      args="-alsologtostderr" required="true" if="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="image_in"               to="/camera/rgb/image_raw"/>
      <remap from="pointcloud_in"          to="/points"/>
      <!-- Output -->
      <remap from="pointcloud_recolor_out" to="/points"/>
    </node>
  </group>

  <!-- Send colored pointcloud with semantics to kimera_semantics for 3D segmentation -->
  <arg name="server_type" default="kimera_semantics_node"/>
  <node name="kimera_semantics_node" pkg="kimera_semantics_ros"
    type="$(arg server_type)" output="screen"
    args="-alsologtostderr -colorlogtostderr" clear_params="true">
    <!-- Input -->
    <remap from="pointcloud" to="/points"/>
    
    <!-- Params -->
    <param name="tsdf_voxel_size"           value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side"      value="32" />
    <param name="max_ray_length_m"          value="15.0" />
    <param name="min_time_between_msgs_sec" value="0.2" />
    <param name="voxel_carving_enabled"     value="false" />
    <param name="color_mode"                value="color"/>
    <param name="use_const_weight"          value="false" />

    <param name="sensor_frame"              value="$(arg sensor_frame)"/>
    <param name="use_tf_transforms"         value="true" />


    <param name="enable_icp"                value="false" />
    <param name="icp_iterations"            value="10" />

    <param name="verbose"                   value="true" />

    <!-- "fast" or "merged" -->
    <param name="semantic_tsdf_integrator_type"    value="fast" />
    <!-- "color", "semantic" or "semantic_probability" -->
    <param name="semantic_color_mode"              value="semantic"/>
    <param name="semantic_measurement_probability" value="0.8" />
 
    <!-- Is this needed? -->
    <param name="slice_level" value="1.0" />

    <param name="semantic_label_2_color_csv_filepath"
    value="$(find kimera_semantics_ros)/cfg/tesse_multiscene_office1_segmentation_mapping.csv"/>

    <param name="publish_pointclouds"     value="false"/>
    <param name="update_mesh_every_n_sec" value="0.2" />
    <param name="mesh_filename"           value="$(find kimera_semantics_ros)/mesh_results/kimera.ply" />
  </node>
</launch>
